package com.concepts.elasticsearch.controller;

import java.io.IOException;

import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.concepts.elasticsearch.core.ElasticSearchClient;

@RestController
public class ElasticSearchController {

	private ElasticSearchClient elasticSearchClient;

	public ElasticSearchController(ElasticSearchClient elasticSearchClient) {
		this.elasticSearchClient = elasticSearchClient;
	}

	@RequestMapping("/check-connection")
	public String checkConnection() {
		System.out.println(elasticSearchClient.getRestHighLevelClient());
		return "Connection Successful";
	}

	@RequestMapping("/search")
	public String search() throws IOException {
		RestHighLevelClient restHighLevelClient = elasticSearchClient.getRestHighLevelClient();
		RequestOptions options = null;
		SearchRequest searchRequest = new SearchRequest("comply_md_application_opening_development");
		SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
		searchSourceBuilder.query(QueryBuilders.matchAllQuery());
		searchRequest.source(searchSourceBuilder);
		searchRequest.scroll(TimeValue.timeValueMinutes(11));

		SearchResponse searchResponse = restHighLevelClient.search(searchRequest, options);
		String scrollId = searchResponse.getScrollId();
		System.out.println("Scroll Id: " + scrollId);
		return searchResponse.getHits().getHits().toString();

	}
}
